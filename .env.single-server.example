# =============================================================================
# Blitz Test Server - Single Server Deployment Configuration
# =============================================================================
# Optimized settings for single-server production deployment
# Copy this to .env and update FLASK_SECRET_KEY with a secure value

# =============================================================================
# Core Application Settings
# =============================================================================
FLASK_ENV=production
APP_VERSION=1.0.0
LOG_LEVEL=INFO

# Flask Secret (REQUIRED - replace with secure random key!)
# Generate with: python -c "import secrets; print(secrets.token_urlsafe(32))"
FLASK_SECRET_KEY=REPLACE-WITH-SECURE-RANDOM-32-CHAR-KEY

# =============================================================================
# Single Server Web Configuration
# =============================================================================
WEB_HOST=127.0.0.1
WEB_PORT=8000

# =============================================================================
# Production Metrics and Monitoring
# =============================================================================
# Enable Prometheus metrics for production monitoring
ENABLE_METRICS=true

# Gunicorn multiprocess metrics directory
PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus_multiproc

# =============================================================================
# Single Server Rate Limiting 
# =============================================================================
# No Redis needed for single server - using in-memory limiting
RATE_LIMIT_REDIS_URL=

# Conservative rate limits for production
RATE_LIMITS_START=5/minute
RATE_LIMITS_STOP=5/minute
RATE_LIMITS_RECOVER=5/minute
RATE_LIMITS_STATUS=20/minute
RATE_LIMITS_GLOBAL=100/minute

# =============================================================================
# Production Security Configuration
# =============================================================================
# Strict CSP for production (only allow necessary CDN sources)
SECURITY_CSP=default-src 'self'; script-src 'self' cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' cdn.jsdelivr.net; img-src 'self' data:; font-src 'self' cdn.jsdelivr.net

# Request size limit (1MB)
MAX_REQUEST_BYTES=1048576

# Enable secure sessions for HTTPS (update when SSL is configured)
SESSION_SECURE=false
CSRF_SSL_STRICT=false

# =============================================================================
# Maintenance and Operations
# =============================================================================
# Maintenance mode disabled by default
MAINTENANCE_MODE_DEFAULT=false

# No broadcast banner by default
BROADCAST_BANNER=

# =============================================================================
# Production Environment Settings
# =============================================================================
# Asia/Seoul timezone
TZ=Asia/Seoul

# Python production optimizations
PYTHONUNBUFFERED=1
PYTHONDONTWRITEBYTECODE=1

# Session configuration for production
SESSION_COOKIE_NAME=blitz_session

# =============================================================================
# Health Check Endpoints Available
# =============================================================================
# These endpoints are configured automatically:
# GET /healthz  - Basic health check (no auth required)
# GET /livez    - Liveness check (no auth required)  
# GET /readyz   - Readiness check (no auth required)
# GET /metrics  - Prometheus metrics (when ENABLE_METRICS=true)

# =============================================================================
# Database Configuration
# =============================================================================
# Uses SQLite by default at instance/users.db
# For production, ensure proper file permissions and backups

# =============================================================================
# Logging Configuration  
# =============================================================================
# Logs to stdout/stderr for systemd/Docker compatibility
# Use LOG_LEVEL=DEBUG only for troubleshooting